
import os
import requests
import datetime

import pandas as pd

path = os.path.dirname(os.path.realpath(__file__))
os.chdir(path)

from debug import Debug

###################################################

def format_date(date_part):
    """ if the length of date part is 1, 
        we add prefix '0' 
        returns -1 if """
        
    date_part = str(date_part)
    
    ln = len(date_part)
    
    if ln == 2:
        return date_part
    else:
        if ln == 1:
            return '0' + date_part
        else:
            print('input error in format_date function')
            return -1
            
###################################################

def construct_row_from_source_line(line):
    """ converts source line to csv format """
    
    try:
        year = line[:4]
        week = line[5:7]
        
        line = line[7:].strip()
        
        items_list = line.split(',')
        
        result_list = [year, week]
        
        for item in items_list:
            result_list.append(item.strip())
        
    except:
        return None
    
    return result_list

################################################### 
    

def get_data(year1='1981',
             year2='2017',
             province_id=1,
             file_type=1):
    """ fetch text data from web and save
        structured lines to file """
       
    try:
        
        # int to string
        year1 = str(year1)
        year2 = str(year2)
        province_id = str(province_id)
        
        # construct url using params
        
        
        url = 'https://www.star.nesdis.noaa.gov/smcd/emb/'
        url += 'vci/VH/get_provinceData.php?country=UKR&'
        url += 'provinceID='
        url += province_id
        url += '&year1='
        url += year1
        url += '&'
        url += 'year2='
        url += year2
        
        if file_type == 1:
            url += '&type=Mean'
            
        else:
            url += '&type=VHI_Parea'           
            
    
        # get web page text
        
        
        r = requests.get(url, timeout=(60,60))
        
        
        txt = str(r.content)
        txt = txt.replace('\\n', '\n')
        
        # construct file name
        fname = 'vhi_id_' + province_id + '_'
        fname += year1 + '_' + year2 + '__'
        today = datetime.datetime.today()
        year = today.year
        month = today.month
        day = today.day
        hour = today.hour
        minute = today.minute
        sec = today.second
        
        # format date parts        
        month = str(month)
        month = format_date(month)        
        day = str(day)
        day = format_date(day)       
        hour = str(hour)
        hour = format_date(hour)       
        minute = str(minute)
        minute = format_date(minute)        
        sec = str(sec)
        sec = format_date(sec)
            
        fname += '_fileType' + str(file_type)
        fname += '_loaded_date_' + str(year) + '-' 
        fname += month + '-' 
        fname += day + '_time_'
        fname += hour + '-'
        fname += minute + '-'
        fname += sec + '.csv'
        
        # save data to file
    
        f = open(fname, 'w')
        
        txt_lines = txt.split('\n') 
        
        if file_type == 1:                
                
            head = 'year,week,SMN,SMT,VCI,TCI,VHI\n'
                      
        else:
            head = 'year,week,p0,p5,p10,p15,p20,p25,p30,p35,'
            head += 'p40,p45,p50,p55,p60,p65,p70,p75,p80,p85,'                
            head += 'p90,p95,p10\n'               
            
        f.write(head)
        
        for line in txt_lines[1:-1]:
            
            # get values from line

            items = construct_row_from_source_line(line)

            if not items: # if it is None
                continue      
               
            # skip wrong lines             
            try:
                if not 1981 <= int(year) <= 2017:
                    continue
            except:
                continue
            
            res_line = ''
            
            for item in items:
                res_line += item + ','
            res_line = res_line[:-1] # delete last comma
            
            f.write(res_line + '\n')
        
        f.close()
        
        return True
    
    except:
        Debug.print_exception_info()
        return False
    
###################################################

def read_data_to_dataframe(fname, file_type=1):
    """ loads the values from csv 
        to pandas dataframe
    """
    
    if file_type == 1:
        columns_list = ['year', 'week', 'SMN', 'SMT', 
                        'VCI', 'TCI', 'VHI']
    
    else:
        columns_list = ['year','week','p0','p5','p10','p15','p20',
                        'p25','p30','p35', 'p40','p45','p50','p55',
                        'p60','p65','p70','p75','p80','p85','p90',
                        'p95','p100']

    try:
        f = open(path + '/' + fname, 'r')
        lines = f.readlines()
        f.close()
       
        d = dict()
        
        for c in columns_list:
            d[c] = []

        
        for line in lines[1:]:
            
            items = line.split(',')
            
            for i in range(len(columns_list)):
                if i < 2:
                    d[columns_list[i]].append(int(items[i].strip()))
                else:
                    d[columns_list[i]].append(float(items[i].strip()))
                    
                    
        df = pd.DataFrame(d, 
                          columns=columns_list)
        
    except:
        Debug.print_exception_info()
        return None
                     
    return df
    
###################################################

def replace_province_id(x):
    
    if x == 1: # cherkasi
        return 22
    elif x == 2:
        return 24 # chernigiv
    elif x == 3:
        return 23 # chernivzi
    elif x == 4:
        return 25 # crim
    elif x == 5:
        return 3 # dnepr
    elif x == 6:
        return 4 # donezk
    elif x == 7:
        return 8 # ivano-frankivsk
    elif x == 8:
        return 19 # charkiv
    elif x == 9:
        return 20 # cherson
    elif x == 10:
        return 21 # chmelnizkiy
    elif x == 11:
        return 9 # kiyiv
    elif x == 12:
        return 9 # kiyiv (city)
    elif x == 13:
        return 10 # kirovograd
    elif x == 14:
        return 11 # lugansk
    elif x == 15:
        return 12 # lviv
    elif x == 16:
        return 13 # mikolayiv
    elif x == 17:
        return 14 # odesa
    elif x == 18:
        return 15 # poltava
    elif x == 19:
        return 16 # rivne
    elif x == 20:
        return 25 # crim (sevastopol)
    elif x == 21:
        return 17 # sumi
    elif x == 22:
        return 18 # ternopil
    elif x == 23:
        return 6 # zakarpat'e
    elif x == 24:
        return 1 # vinniza
    elif x == 25:
        return 2 # volin
    elif x == 26:
        return 7 # zaporizh'e
    elif x == 27:
        return 5 # zhitomir
    
###################################################

def get_year_vhi_min_max(df, year):
    
    try:
        year = int(year)
    except:
        Debug.print_exception_info()
        return None, None
    
    df = df[(df['year'] == year)]
    
    if df.empty == False: # if is not empty
        VHI = df['VHI']
        return min(VHI), max(VHI)
    else:
        return None, None
    
###################################################
    
def get_severe_drought_percentage(df):
    
    
    df2 = df[(df['VHI'] < 15)]
    
    if df2.empty == False: # if is not empty
    
        VHI1 = df['VHI'] # all
        VHI2 = df2['VHI'] # severe draught
        
        return 100 * len(VHI2) / len(VHI1) # %
    else:
        return None
    
###################################################

def get_moderate_drought_percentage(df):
    
    
    df2 = df[df['VHI'] < 35]
    
    df2 = df2[df2['VHI'] > 15]
    
    if df2.empty == False: # if is not empty
    
        VHI1 = df['VHI'] # all
        print(VHI1)
        VHI2 = df2['VHI'] # severe draught
        print(VHI2)
        return 100 * len(VHI2) / len(VHI1) # %
    else:
        return None

###################################################

def get_vhi_given_range(df, from_, to):
    
    
    df = df[df['VHI'] < to]
    df = df[df['VHI'] > from_]
    
    return df['VHI']

###################################################


# GET DATA

exists = 0
fname1 = ''
fname2 = ''

files = os.listdir()
for ff in files:
    if ff.startswith('vhi_id'):
        exists += 1
        if 'fileType1' in ff:
            fname1 = ff
        if 'fileType2' in ff:
            fname2 = ff

if not exists:        
            
    res = get_data(year1=2016, year2=2017, file_type=1)
    
    if res:
        print('all is ok: 1')
    else:
        print('program was aborted (exception)')   
        
    
    res = get_data(year1=2016, year2=2017, file_type=2)
    
    if res:
        print('all is ok: 2')
    else:
        print('program was aborted (exception)')  
    
 
# READ DATA TO DATAFRAME

if fname1:

    df1 = read_data_to_dataframe(fname1)
    
    if not df1 is None:
        print(list(df1.columns.values))
        print(df1[:10])
          
        print()
        print('------------------')
    
if fname2:
    
    df2 = read_data_to_dataframe(fname2, file_type=2)
    
    if not df2 is None:
        print(list(df2.columns.values))
        print(df2[:10])
          
        print()
        print('------------------')
    
    
# GET MIN, MAX VHI FROM GIVEN YEAR
print(get_year_vhi_min_max(df1, '2016'))
print(get_year_vhi_min_max(df1, '2017'))

# GET VHI RANGE
print()
x = get_vhi_given_range(df1, 0, 100)
if not x is None:
    print(x[:10])

# GET SEVERE DRAUGHT PERCENTAGE
x = get_severe_drought_percentage(df1)
if not x is None:
    print('severe draught percentage: ', x[:10])

# GET MODERATE DRAUGHT PERCENTAGE
x = get_severe_drought_percentage(df1)
if not x is None:
    print('moderate draught percentage: ', x[:10])






















